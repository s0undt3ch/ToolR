name: Prepare Release
description: Prepare a release of ToolR

inputs:
  release-version:
    required: false
    description: 'Release version to prepare'

  release-type:
    required: false
    description: 'Release type to prepare'
    default: 'dev'
    choices:
      - 'major'
      - 'minor'
      - 'patch'
      - 'dev'

outputs:
  release-version:
    description: 'Prepared release version'
    value: ${{ steps.bump-version.outputs.release-version }}

  release-patch-name:
    description: 'Name of the release patch'
    value: ${{ steps.bump-version.outputs.release-patch-name }}

  release-notes-filename:
    description: 'Name of the release notes file'
    value: ${{ steps.prepare-release-notes.outputs.release-notes-filename }}

  release-tarball-name:
    description: 'Name of the release tarball'
    value: ${{ steps.create-source-tarball.outputs.release-tarball-name }}

runs:
  using: composite

  steps:

    - name: Setup Virtual Environment
      uses: ./.github/actions/setup-virtualenv
      with:
        cache-prefix: prepare-release
        python-version: "3.11"
        uv-sync-args: "--group docs"

    - name: Setup Pre-Commit
      uses: ./.github/actions/setup-pre-commit

    - name: Bump Version
      id: bump-version
      shell: bash
      run: |
        if [ -z "${{ inputs.release-version }}" ]; then
          echo "No release version provided, bumping version based on release type: ${{ inputs.release-type }}"
          RELEASE_VERSION=$(uv run toolr version bump --${{ inputs.release-type }} --write --check-existing-tag)
        else
          echo "Using provided release version: ${{ inputs.release-version }}"
          RELEASE_VERSION=$(uv run toolr version bump ${{ inputs.release-version }} --write --check-existing-tag)
        fi

    - name: Generate changelog for GH release
      id: git-cliff
      uses: orhun/git-cliff-action@v4
      with:
        config: cliff.toml
        args: --unreleased --strip all
      env:
        OUTPUT: .release-changes.md
        GITHUB_REPO: ${{ github.repository }}

    - name: Prepare GH Release changelog
      id: prepare-release-notes
      shell: bash
      run: |
        tail -n +3 .release-changes.md > release-notes.md
        echo "release-notes-filename=release-notes.md" >> "$GITHUB_OUTPUT"

    - name: Upload Release Notes Artifact
      id: upload-release-notes
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.prepare-release-notes.outputs.release-notes-filename }}
        path: ${{ steps.prepare-release-notes.outputs.release-notes-filename }}
        retention-days: 7
        if-no-files-found: error

    - name: Attest release notes artifact
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: ${{ steps.prepare-release-notes.outputs.release-notes-filename }}
        subject-digest: sha256:${{ steps.upload-release-notes.outputs.artifact-digest }}

    - name: Update CHANGELOG.md
      uses: orhun/git-cliff-action@v4
      with:
        config: cliff.toml
        args: --verbose --unreleased --tag '${{ env.RELEASE_VERSION }}' --prepend CHANGELOG.md
      env:
        GITHUB_REPO: ${{ github.repository }}

    - name: Show Changes Diff
      shell: bash
      run: |
        git diff --color

    - name: Commit changes
      shell: bash
      run: |
        # Add the CHANGELOG.md file to the commit
        git add CHANGELOG.md
        # Run pre-commit against the changes
        pre-commit run --all-files --show-diff-on-failure --color=always || true
        # Commit the changes
        git commit -am "chore(release): Prepare for ${{ env.RELEASE_VERSION }} release"

    - name: Tag the release
      shell: bash
      run: |
        git tag -a "${{ env.RELEASE_VERSION }}" -m "Release ${{ env.RELEASE_VERSION }}"

    - name: Create Release Patch
      shell: bash
      run: |
        git format-patch --keep-subject --binary --stdout HEAD^ > toolr-${{ env.RELEASE_VERSION }}.patch

    - name: Upload Changes Diff Artifact
      id: upload-release-patch
      uses: actions/upload-artifact@v4
      with:
        name: toolr-${{ env.RELEASE_VERSION }}.patch
        path: toolr-${{ env.RELEASE_VERSION }}.patch
        retention-days: 7
        if-no-files-found: error

    - name: Attest release patch artifact
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: toolr-${{ env.RELEASE_VERSION }}.patch
        subject-digest: sha256:${{ steps.upload-release-patch.outputs.artifact-digest }}

    - name: Create Source Tarball
      id: create-source-tarball
      shell: bash
      run: |
        uv build --sdist
        echo "release-tarball-name=$(ls dist/ | grep gz)" >> "$GITHUB_OUTPUT"

    - name: Upload Source Tarball Artifact
      id: upload-source-tarball
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.create-source-tarball.outputs.release-tarball-name }}
        path: dist/${{ steps.create-source-tarball.outputs.release-tarball-name }}
        retention-days: 7
        if-no-files-found: error

    - name: Attest source tarball artifact
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: ${{ steps.create-source-tarball.outputs.release-tarball-name }}
        subject-digest: sha256:${{ steps.upload-source-tarball.outputs.artifact-digest }}
