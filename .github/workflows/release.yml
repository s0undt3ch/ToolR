
name: Release
run-name: "Release (branch: ${{ github.ref_name }}; version: ${{ inputs.release-version }})"

on:
  workflow_dispatch:
    inputs:
      release-version:
        required: false
        type: string
        description: 'Release version to prepare'

env:
  COLUMNS: 190
  FORCE_COLOR: "1"
  TOOLR_DEBUG_IMPORTS: "1"

permissions:
  contents: write
  id-token: write
  packages: write
  attestations: write


concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.repository }}
  cancel-in-progress: false

jobs:

  prepare-ci:
    name: Prepare CI
    runs-on: ubuntu-latest
    environment: release
    outputs:
      platform-matrix: ${{ steps.generate-build-matrix.outputs.platform-matrix }}
    steps:

      - name: Check For Admin Permission
        uses: actions-cool/check-user-permission@v2
        with:
          require: admin
          username: ${{ github.triggering_actor }}

      - uses: actions/checkout@v5

      - name: Setup Virtual Environment
        uses: ./.github/actions/setup-virtualenv
        with:
          cache-prefix: prepare-release
          python-version: "3.11"

      - name: Generate Build Matrix
        id: generate-build-matrix
        run: |
          uv run toolr ci generate-build-matrix

  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    environment: release
    needs:
      - prepare-ci
    outputs:
      release-version: ${{ steps.prepare-release.outputs.release-version }}
      release-patch-name: ${{ steps.prepare-release.outputs.release-patch-name }}
      release-tarball-name: ${{ steps.prepare-release.outputs.release-tarball-name }}
      release-notes-filename: ${{ steps.prepare-release.outputs.release-notes-filename }}
    steps:
      # We could stick this in a custom, in-repo action, but this would mean we would have to checkout
      # the now, and then checkout again with higher privileges, which is why we're doing it here.
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        shell: bash
        run: |
          echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - uses: ./.github/actions/prepare-release
        id: prepare-release
        with:
          release-version: ${{ inputs.release-version }}
          update-action-version: false

  build-linux:
    name: Build
    needs:
      - prepare-ci
      - prepare-release
    uses: ./.github/workflows/build.yml
    with:
      display-name: Linux
      release-tarball-name: ${{ needs.prepare-release.outputs.release-tarball-name }}
      platform-matrix: ${{ toJSON(fromJSON(needs.prepare-ci.outputs.platform-matrix)['linux']) }}

  build-windows:
    name: Build
    needs:
      - prepare-ci
      - prepare-release
    uses: ./.github/workflows/build.yml
    with:
      display-name: Windows
      release-tarball-name: ${{ needs.prepare-release.outputs.release-tarball-name }}
      platform-matrix: ${{ toJSON(fromJSON(needs.prepare-ci.outputs.platform-matrix)['windows']) }}

  build-macos:
    name: Build
    needs:
      - prepare-ci
      - prepare-release
    uses: ./.github/workflows/build.yml
    with:
      display-name: macOS
      release-tarball-name: ${{ needs.prepare-release.outputs.release-tarball-name }}
      platform-matrix: ${{ toJSON(fromJSON(needs.prepare-ci.outputs.platform-matrix)['macos']) }}

  publish-release:
    name: Publish Release
    environment: release
    needs:
      - build-linux
      - build-windows
      - build-macos
      - prepare-release
    runs-on: ubuntu-latest

    steps:
      # We could stick this in a custom, in-repo action, but this would mean we would have to checkout
      # the now, and then checkout again with higher privileges, which is why we're doing it here.
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        shell: bash
        run: |
          echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Apply Release Patch
        uses: ./.github/actions/apply-release-patch
        with:
          release-patch-name: ${{ needs.prepare-release.outputs.release-patch-name }}

      - name: Tag the v${{ needs.prepare-release.outputs.release-version }} Release
        run: |
          git tag -m "chore(release): Release v${{ needs.prepare-release.outputs.release-version }}" -a v${{ needs.prepare-release.outputs.release-version }}

      - name: Push tag
        run: |
          git push origin v${{ needs.prepare-release.outputs.release-version }}
          git push

      - uses: actions/download-artifact@v5
        with:
          pattern: cibw-wheel-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v5
        with:
          name: ${{ needs.prepare-release.outputs.release-tarball-name }}
          path: dist/

      - uses: actions/download-artifact@v5
        with:
          name: ${{ needs.prepare-release.outputs.release-notes-filename }}

      - name: Attest final release artifacts
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: dist/*

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2.3.3
        with:
          tag_name: v${{ needs.prepare-release.outputs.release-version }}
          name: ${{ needs.prepare-release.outputs.release-version }}
          body_path: ${{ needs.prepare-release.outputs.release-notes-filename }}
          files: dist/*
          draft: false
          prerelease: false
          make_latest: true

      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

  set-pipeline-exit-status:
    environment: release
    permissions:
      actions: read
    # This step is just so we can make github require this step, to pass checks
    # on a pull request instead of requiring all
    name: Set the ${{ github.workflow }} Pipeline Exit Status
    if: always()
    runs-on: ubuntu-latest
    needs:
      - prepare-ci
      - prepare-release
      - publish-release
    steps:
      - uses: martialonline/workflow-status@v4
        id: check
      - run: echo "Workflow failed"
        if: steps.check.outputs.status == 'failure'
      - run: echo "Workflow was cancelled"
        if: steps.check.outputs.status == 'cancelled'
      - run: echo "Workflow was successful"
        if: steps.check.outputs.status == 'success'
