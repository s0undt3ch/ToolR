name: CI Workflow
run-name: "CI (${{ github.event_name == 'pull_request' && format('pr: #{0}', github.event.number) || format('{0}: {1}', startsWith(github.event.ref, 'refs/tags') && 'tag' || 'branch', github.ref_name) }})"

on:
  push:
  pull_request:

concurrency:
  # Concurrency is defined in a way that concurrent builds against the main branch do not not cancel previous builds.
  # However, for branches other than the main branch, and every new build against the same pull request source branch,
  # all older builds against that same branch get canceled.
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.repository }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ !contains(github.ref, 'refs/heads/main') }}

permissions:
  contents: read
  id-token: write
  attestations: write

env:
  COLUMNS: 190
  FORCE_COLOR: "1"
  TOOLR_DEBUG_IMPORTS: "1"

jobs:
  prepare-ci:
    name: Prepare CI
    runs-on: ubuntu-latest
    outputs:
      should-run-build: ${{ steps.check-build.outputs.should-run-build }}
      platform-matrix: ${{ steps.generate-build-matrix.outputs.platform-matrix }}
    steps:

      - uses: actions/checkout@v5

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        id: install-uv
        uses: astral-sh/setup-uv@v6

      - name: Generate additional ToolR requirements file
        run: |
          uv export --frozen --no-hashes --only-group tools --output-file ${{ github.workspace }}/toolr-requirements.txt

      - name: Setup ToolR
        id: setup-toolr
        uses: s0undt3ch/ToolR@v0.10
        with:
          requirements-file: ${{ github.workspace }}/toolr-requirements.txt

      - name: Check if the build should run
        id: check-build
        run: |
          toolr ci check-run-build ${{ github.event_name }} ${{ github.ref_name }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Build Matrix
        id: generate-build-matrix
        if: fromJSON(steps.check-build.outputs.should-run-build)
        run: |
          toolr ci generate-build-matrix

  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-latest
    needs:
      - prepare-ci
    if: fromJSON(needs.prepare-ci.outputs.should-run-build)
    steps:
      - uses: actions/checkout@v5

      - name: Setup Pre-Commit
        id: setup-pre-commit
        uses: ./.github/actions/setup-pre-commit

      - name: Run Pre-Commit
        env:
          PIPX_HOME: ${{ steps.setup-pre-commit.outputs.pipx-home-dir }}
          PIPX_BIN_DIR: ${{ steps.setup-pre-commit.outputs.pipx-bin-dir }}
          PIPX_DEFAULT_PYTHON: ${{ steps.setup-pre-commit.outputs.pipx-python-path }}
        run: |
          pre-commit run --all-files --show-diff-on-failure --color=always

  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs:
      - pre-commit
    outputs:
      release-version: ${{ steps.prepare-release.outputs.release-version }}
      release-patch-name: ${{ steps.prepare-release.outputs.release-patch-name }}
      release-tarball-name: ${{ steps.prepare-release.outputs.release-tarball-name }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - uses: ./.github/actions/configure-git
      - uses: ./.github/actions/prepare-release
        id: prepare-release
        with:
          release-type: dev
          update-action-version: ${{ github.event_name == 'pull_request' }}

  test-linux:
    name: Test
    needs:
      - pre-commit
    uses: ./.github/workflows/test.yml
    with:
      os: ubuntu-latest
      display-name: Linux

  test-windows:
    name: Test
    needs:
      - pre-commit
    uses: ./.github/workflows/test.yml
    with:
      os: windows-latest
      display-name: Windows
  test-macos:
    name: Test
    needs:
      - pre-commit
    uses: ./.github/workflows/test.yml
    with:
      os: macos-latest
      display-name: macOS

  build-linux:
    name: Build
    needs:
      - prepare-ci
      - test-linux
      - prepare-release
    uses: ./.github/workflows/build.yml
    with:
      display-name: Linux
      release-tarball-name: ${{ needs.prepare-release.outputs.release-tarball-name }}
      platform-matrix: ${{ toJSON(fromJSON(needs.prepare-ci.outputs.platform-matrix)['linux']) }}

  build-windows:
    name: Build
    needs:
      - prepare-ci
      - test-windows
      - prepare-release
    uses: ./.github/workflows/build.yml
    with:
      display-name: Windows
      release-tarball-name: ${{ needs.prepare-release.outputs.release-tarball-name }}
      platform-matrix: ${{ toJSON(fromJSON(needs.prepare-ci.outputs.platform-matrix)['windows']) }}

  build-macos:
    name: Build
    needs:
      - prepare-ci
      - test-macos
      - prepare-release
    uses: ./.github/workflows/build.yml
    with:
      display-name: macOS
      release-tarball-name: ${{ needs.prepare-release.outputs.release-tarball-name }}
      platform-matrix: ${{ toJSON(fromJSON(needs.prepare-ci.outputs.platform-matrix)['macos']) }}

  docs:
    name: Publish Docs
    runs-on: ubuntu-latest

    needs:
      - pre-commit
      - prepare-release

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Virtual Environment
        uses: ./.github/actions/setup-virtualenv
        with:
          cache-prefix: docs
          python-version: "3.11"
          uv-sync-args: "--group docs"

      - uses: ./.github/actions/configure-git
      - name: Apply Release Patch
        uses: ./.github/actions/apply-release-patch
        with:
          release-patch-name: ${{ needs.prepare-release.outputs.release-patch-name }}

      - name: Build MkDocs site
        run: uv run mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  publish:
    name: Publish to Test PyPI
    needs:
      - build-linux
      - build-windows
      - build-macos
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: cibw-wheel-*
          path: dist
          merge-multiple: true

      - name: Flatten dist/ directory
        run: |
          ls -lah dist/

      - name: Publish to Test PyPI (Trusted Publisher)
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: true
          verbose: true

  set-pipeline-exit-status:
    permissions:
      actions: read
    # This step is just so we can make github require this step, to pass checks
    # on a pull request instead of requiring all
    name: Set the ${{ github.workflow }} Pipeline Exit Status
    if: always()
    runs-on: ubuntu-latest
    needs:
      - prepare-ci
      - pre-commit
      - prepare-release
      - docs
      - publish
    steps:
      - uses: martialonline/workflow-status@v4
        id: check
      - run: echo "Workflow failed"
        if: steps.check.outputs.status == 'failure'
      - run: echo "Workflow was cancelled"
        if: steps.check.outputs.status == 'cancelled'
      - run: echo "Workflow was successful"
        if: steps.check.outputs.status == 'success'
