name: Test

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
        description: 'Operating system to run tests on'
      display-name:
        required: true
        type: string
        description: 'Display name for the test job'

jobs:
  test:
    name: ${{ inputs.display-name }} (${{ matrix.python-version }})
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"

    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/setup-virtualenv
        id: setup-virtualenv
        with:
          cache-prefix: test
          python-version: ${{ matrix.python-version }}
          uv-sync-args: "--all-extras --dev"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - id: rust-version-checksum
        run: echo "version-sha256sum=$(rustc --version | sha256sum | cut -d ' ' -f1)" >> "$GITHUB_OUTPUT"

      - name: Cache `~/.cargo`
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}|cargo|${{ steps.setup-virtualenv.outputs.python-version-checksum }}|${{ steps.rust-version-checksum.outputs.version-sha256sum }}|${{ hashFiles('Cargo.toml', 'Cargo.lock') }}

      - name: Cache Rust `target/release`
        uses: actions/cache@v4
        with:
          path: |
            target/release
          key: ${{ runner.os }}|target|release|${{ steps.setup-virtualenv.outputs.python-version-checksum }}|${{ steps.rust-version-checksum.outputs.version-sha256sum }}|${{ hashFiles('Cargo.toml', 'Cargo.lock') }}

      - name: Cache Rust `target/coverage`
        uses: actions/cache@v4
        with:
          path: |
            target/coverage
          key: ${{ runner.os }}|target|coverage|${{ steps.setup-virtualenv.outputs.python-version-checksum }}|${{ steps.rust-version-checksum.outputs.version-sha256sum }}|${{ hashFiles('Cargo.toml', 'Cargo.lock') }}

      - name: Build Rust Release
        run: |
          cargo build --release --target-dir target/release

      - name: Run Python Tests
        env:
          PYTHONPATH: "${{ github.workspace }}/tests/support/coverage"
          COVERAGE_PROCESS_START: "${{ github.workspace }}${{ runner.os == 'Windows' && '\\' || '/' }}.coveragerc"
        run: |
          uv run coverage run -m pytest -ra -s -v --color=yes --junitxml=junit-${{ matrix.python-version }}-${{ inputs.os }}.xml

      - name: Report Python Coverage
        run: |
          uv run coverage combine || true
          uv run coverage xml
          uv run coverage report

      - name: Install Tarpaulin
        run: |
          cargo install cargo-tarpaulin --target-dir target/coverage

      - name: Tarpaulin Build
        run: |
          cargo tarpaulin --no-run --target-dir target/coverage

      - name: Run Rust Tests
        run: |
          cargo tarpaulin --workspace --tests --skip-clean --timeout 120 --out Xml --out Json --output-dir target/coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          # Use OpenID Connect for secure authentication (no token needed)
          use_oidc: true
          flags: ${{ inputs.os }},${{ matrix.python-version }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          # Use OpenID Connect for secure authentication (no token needed)
          use_oidc: true
          flags: ${{ inputs.os }},${{ matrix.python-version }}
