[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "ToolR"
description = "In-project CLI tooling support"
requires-python = ">=3.10"
authors = [
  {name = "Pedro Algarvio", email = "pedro@algarvio.me"}
]
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = ["version", "readme", "dependencies", "optional-dependencies"]

[project.scripts]
toolr = "toolr.__main__:main"

[project.urls]
Repository = "https://github.com/s0undt3ch/ToolR"
Documentation = "https://readthedocs.org"
"Bug Reports" = "https://github.com/s0undt3ch/ToolR/issues"
Changelog = "https://github.com/s0undt3ch/ToolR/blob/main/CHANGELOG.md"

[tool.setuptools_scm]
write_to = "src/toolr/_version.py"
write_to_template = "# pylint: skip-file\n\n__version__ = \"{version}\"\n"

[tool.setuptools.packages]
# Pure Python packages/modules
find = { where = ["src"] }

[tool.setuptools.dynamic]
readme = {file = ["README.md"]}
dependencies = {file = "requirements/base.txt"}

[tool.setuptools.dynamic.optional-dependencies]
test = {file = "requirements/test.txt"}
build = {file = "requirements/build.txt"}
changelog = {file = "requirements/changelog.txt"}
tools = {file = "requirements/tools.txt"}
dev = {file = [
  "requirements/base.txt",
  "requirements/test.txt",
  "requirements/dev.txt",
  "requirements/tools.txt"
]}


[tool.towncrier]
package = "ToolR"
filename = "CHANGELOG.md"
directory = "changelog.d/"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
title_format = "## {version} ({project_date})"
issue_format = "[#{issue}](https://github.com/s0undt3ch/ToolR/issues/{issue})"

  [[tool.towncrier.type]]
  directory = "security"
  name = "Security"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "bugfix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "doc"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = true

[tool.ruff]
line-length = 120
show-fixes = true
target-version = "py310"
respect-gitignore = true
src = [
  "src",
]
extend-exclude = [
  ".nox/**",
]
extend-include = [
  "setup.py",
  "noxfile.py",
  "src/**/*.pyi",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # D* pydocstyle
  "D200",   # Reformat to one line
  "D212",   # Remove whitespace after opening quotes
  "COM",    # flake8-commas - Black takes care of this
  "ERA",    # eradicate
  "SIM108", # Use ternary operator `A = X if Y else Z` instead of `if`-`else`-block
  "FBT",    # Boolean traps
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `**kwargs`
  "ANN102", # Missing type annotation for `cls` in classmethod
]

[tool.ruff.lint.per-file-ignores]
"src/**/*.py" = [
  "ANN101", # Missing type annotation for `self` in method
  "D100",   # Missing docstring in public module
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in `__init__`
]
"src/toolr/__init__.py" = [
  "E402",   # Module level import not at top of file
  "F401",   # * imported but unused; consider adding to `__all__` or using a redundant alias
]
"noxfile.py" = [
  "D",
  "ANN",
  "PTH",
  "SLF001",
  "C901",
  "PLR0912",
  "DTZ005",
  "FBT002",
  "PLR0915", # Too many statements
]
"tests/**/*.py" = [
  "ANN",      # Ignore missing type annotations in tests
  "ARG001",   # Unused function argument
  "D100",     # Missing docstring in public module
  "D103",     # Missing docstring in public function
  "D104",     # Missing docstring in public package
  "DTZ003",   # The use of `datetime.datetime.utcnow()` is not allowed, use `datetime.datetime.now(tz=)` instead
  "PLR2004",  # Magic value used in comparison, consider replacing 3 with a constant variable
  "PT001",    # use @pytest.fixture() over @pytest.fixture
  "PT023",    # use @pytest.mark.<blah>() over @pytest.mark.<blah>
  "RET504",   # Unnecessary variable assignment before `return` statement"
  "S101",     # Ignore the use of 'assert ...' in tests
  "S603",     # `subprocess` call: check for execution of untrusted input
  "SIM117",   # Use a single `with` statement with multiple contexts instead of nested `with` statements
  "TCH002",   # Move third-party import into a type-checking block
  "TCH003",   # Move standard library import `pathlib` into a type-checking block
]
"tools/**/*.py" = [
  "ANN101", # Missing type annotation for `self` in method
  "D100",   # Missing docstring in public module
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in `__init__`
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = false
force-single-line = true
known-first-party = ["src"]
forced-separate = ["tests"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

#[tool.ruff.pep8-naming]
#ignore-names = [
#  "__virtual__",
#]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 25
